\import example

{- identity type '=' -}
{- show it is an equality relation,
Reflexivity
  idp { A : \Type } {a : A} : a = a


 -}
{- homogeneous transport?  between element of a -}
\func transport { A : \Type } ( B : A -> \Type) { a a' : A} (p : a = a' ) (b : B a)
  : B a' => coe (\lam i => B (p @ i)) b right

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func \infix 2 qed {A : \Type} (a : A) : a = a => idp

\func \infixr 1 >== {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') => p *> q

\func \infix 2 ==< {A : \Type} (a : A) {a' : A} (p : a = a') => p

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a'
  => path (\lam i => f (p @ i))

{- interval type  \data I | left | right | <some other thing we dont have access to>
- pattern matching on I is prohibited since it can be used to derive Unit = Empty
- -}

{-
  equality left = right implies that some a : A and a' : A are equal
  iff
  there exists a function f : I -> A
  s.t.
    f left ==> a
    f right ==> a'

      where '==>' denotes computational equality


  the type a ={A} a'
    is defined as the type of all functions
      f : I -> A
      satisfying the above propety







 -}




\data TY | a | b
\func t : a = a => idp
\func f : a = b => idp



{-
Path A a a'

constructor
  path (\Pi ( i : I ) -> A i)

path takes some function 'f'
additional constraints for 'f'

f left = a
f right = a'

 -}
\func test : Path Bool true false => \lam i : I => false