\import DataTypes.Option

\class Functor (F : \Type -> \Type )
  | fmap {A B : \Type} (f : A -> B) : F A -> F B
  | fmap-id {A : \Type} (e : F A) : fmap (\lam (a : A) => a) e = e
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (e : F A)
    : fmap (\lam a => g (f a)) e = fmap g (fmap f e)

\instance Option-Functor : Functor Option
  | fmap {A B : \Type} (f : A -> B) => \lam (oa : Option A) => \case oa \with {
    | None => None
    | Some a => Some (f a)
  }
  | fmap-id {A : \Type} (e : Option A) => \case e \with {
    | None => None
    | Some a => Some a
  } =
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (e : Option A) => {?}

